// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library optimizer;

import 'dart:typed_data' show Uint8List;

import 'package:flame_spatial_grid/src/collisions/optimizer/isolate/flat_buffers/flat_buffers_optimizer.dart';
import 'package:flat_buffers/flat_buffers.dart' as fb;

class OverlappedSearchResponse {
  OverlappedSearchResponse._(this._bc, this._bcOffset);

  factory OverlappedSearchResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OverlappedSearchResponse> reader =
      _OverlappedSearchResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<OptimizedCollisions>? get optimizedCollisions =>
      const fb.ListReader<OptimizedCollisions>(OptimizedCollisions.reader)
          .vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'OverlappedSearchResponse{optimizedCollisions: $optimizedCollisions}';
  }

  OverlappedSearchResponseT unpack() => OverlappedSearchResponseT(
      optimizedCollisions:
          optimizedCollisions?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, OverlappedSearchResponseT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class OverlappedSearchResponseT implements fb.Packable {
  List<OptimizedCollisionsT>? optimizedCollisions;

  OverlappedSearchResponseT({this.optimizedCollisions});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? optimizedCollisionsOffset = optimizedCollisions == null
        ? null
        : fbBuilder.writeList(
            optimizedCollisions!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, optimizedCollisionsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'OverlappedSearchResponseT{optimizedCollisions: $optimizedCollisions}';
  }
}

class _OverlappedSearchResponseReader
    extends fb.TableReader<OverlappedSearchResponse> {
  const _OverlappedSearchResponseReader();

  @override
  OverlappedSearchResponse createObject(fb.BufferContext bc, int offset) =>
      OverlappedSearchResponse._(bc, offset);
}

class OverlappedSearchResponseBuilder {
  OverlappedSearchResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addOptimizedCollisionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OverlappedSearchResponseObjectBuilder extends fb.ObjectBuilder {
  final List<OptimizedCollisionsObjectBuilder>? _optimizedCollisions;

  OverlappedSearchResponseObjectBuilder({
    List<OptimizedCollisionsObjectBuilder>? optimizedCollisions,
  }) : _optimizedCollisions = optimizedCollisions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? optimizedCollisionsOffset = _optimizedCollisions == null
        ? null
        : fbBuilder.writeList(_optimizedCollisions!
            .map((b) => b.getOrCreateOffset(fbBuilder))
            .toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, optimizedCollisionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
