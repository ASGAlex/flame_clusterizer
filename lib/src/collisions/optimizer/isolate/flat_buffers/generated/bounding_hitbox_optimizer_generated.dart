// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library optimizer;

import 'dart:typed_data' show Uint8List;
import 'dart:ui' as ui;

import 'package:flame_spatial_grid/src/collisions/optimizer/isolate/flat_buffers/flat_buffers_optimizer.dart';
import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:vector_math/vector_math_64.dart' as vector;

class BoundingHitbox {
  BoundingHitbox._(this._bc, this._bcOffset);

  factory BoundingHitbox(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BoundingHitbox> reader = _BoundingHitboxReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ui.Rect? rectCache;
  vector.Vector2? aabbCenter;

  Vector2? get position => Vector2.reader.vTableGetNullable(_bc, _bcOffset, 4);

  Vector2? get size => Vector2.reader.vTableGetNullable(_bc, _bcOffset, 6);

  Vector2? get parentPosition =>
      Vector2.reader.vTableGetNullable(_bc, _bcOffset, 8);

  bool get skip => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);

  int get index => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);

  Aabb2? get aabb => Aabb2.reader.vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'BoundingHitbox{position: $position, size: $size, parentPosition: $parentPosition, skip: $skip, index: $index, aabb: $aabb}';
  }

  BoundingHitboxT unpack() => BoundingHitboxT(
      position: position?.unpack(),
      size: size?.unpack(),
      parentPosition: parentPosition?.unpack(),
      skip: skip,
      index: index,
      aabb: aabb?.unpack());

  static int pack(fb.Builder fbBuilder, BoundingHitboxT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class BoundingHitboxT implements fb.Packable {
  Vector2T? position;
  Vector2T? size;
  Vector2T? parentPosition;
  bool skip;
  int index;
  Aabb2T? aabb;

  BoundingHitboxT(
      {this.position,
      this.size,
      this.parentPosition,
      this.skip = false,
      this.index = 0,
      this.aabb});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(6);
    if (position != null) {
      fbBuilder.addStruct(0, position!.pack(fbBuilder));
    }
    if (size != null) {
      fbBuilder.addStruct(1, size!.pack(fbBuilder));
    }
    if (parentPosition != null) {
      fbBuilder.addStruct(2, parentPosition!.pack(fbBuilder));
    }
    fbBuilder.addBool(3, skip);
    fbBuilder.addInt32(4, index);
    if (aabb != null) {
      fbBuilder.addStruct(5, aabb!.pack(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'BoundingHitboxT{position: $position, size: $size, parentPosition: $parentPosition, skip: $skip, index: $index, aabb: $aabb}';
  }
}

class _BoundingHitboxReader extends fb.TableReader<BoundingHitbox> {
  const _BoundingHitboxReader();

  @override
  BoundingHitbox createObject(fb.BufferContext bc, int offset) =>
      BoundingHitbox._(bc, offset);
}

class BoundingHitboxBuilder {
  BoundingHitboxBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addPosition(int offset) {
    fbBuilder.addStruct(0, offset);
    return fbBuilder.offset;
  }

  int addSize(int offset) {
    fbBuilder.addStruct(1, offset);
    return fbBuilder.offset;
  }

  int addParentPosition(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }

  int addSkip(bool? skip) {
    fbBuilder.addBool(3, skip);
    return fbBuilder.offset;
  }

  int addIndex(int? index) {
    fbBuilder.addInt32(4, index);
    return fbBuilder.offset;
  }

  int addAabb(int offset) {
    fbBuilder.addStruct(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BoundingHitboxObjectBuilder extends fb.ObjectBuilder {
  final Vector2ObjectBuilder? _position;
  final Vector2ObjectBuilder? _size;
  final Vector2ObjectBuilder? _parentPosition;
  final bool? _skip;
  final int? _index;
  final Aabb2ObjectBuilder? _aabb;

  BoundingHitboxObjectBuilder({
    Vector2ObjectBuilder? position,
    Vector2ObjectBuilder? size,
    Vector2ObjectBuilder? parentPosition,
    bool? skip,
    int? index,
    Aabb2ObjectBuilder? aabb,
  })  : _position = position,
        _size = size,
        _parentPosition = parentPosition,
        _skip = skip,
        _index = index,
        _aabb = aabb;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(6);
    if (_position != null) {
      fbBuilder.addStruct(0, _position!.finish(fbBuilder));
    }
    if (_size != null) {
      fbBuilder.addStruct(1, _size!.finish(fbBuilder));
    }
    if (_parentPosition != null) {
      fbBuilder.addStruct(2, _parentPosition!.finish(fbBuilder));
    }
    fbBuilder.addBool(3, _skip);
    fbBuilder.addInt32(4, _index);
    if (_aabb != null) {
      fbBuilder.addStruct(5, _aabb!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
